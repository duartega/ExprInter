 #This file will test features and parsing edge cases for the CS-460 project 2 python interpreter.
# Leave the formatting exactly as it is so that it can test properly.
# This definitely doesn't cover every possible case, but it covers the majority of them.
#Some print commands are commented out, as they will produce errors.
#Try uncommenting them and making sure your program produces errors.

# Note that for checking errors I use if statements and bool/rel expressions. If something reports an error when you think it shouldn't,
# it's possible it was your handling of if statements or bool/rel expressions that actually caused the error.

   #print "Unexpected indentation. This should be an error!"

failCount=0 #if this is 0 at the end of the program then your program passed every test


print ############### testing addition ################"
if 1+1 != 2:
 print "Addition between two integers produced the wrong answer: 1+1 =", 1+1, ", should be 2" 
 failCount = failCount + 1

if 1 + (0==0) != 2:
 print "Addition between an int and a bool produced the wrong answer: 1+(0==0) =", 1+(0==0), ", should be 2"
 failCount = failCount + 1

a = "abc"
b = "def"
if "abc" + "def" != "abcdef":
 print "String concatenation produced the wrong answer: abc + def =", a+b, ", should be abcdef"
 failCount = failCount + 1

print "############### testing if statements ################"
if 1 == 0:
 print "If statement 1 == 0 evaluated to", 1==0, " and executed. Should be 0 and not have executed."
 failCount = failCount + 1
 
failCount = failCount + 1
if 1 == 1:
# these comments preempt an indent token, possibly causing an error in your parsing.
 failCount = failCount - 1
# and this commend preempts a dedent token.
else:
 print "If statement 1 == 1 evaluated to", 1==1, " and executed its else statement. Should be 1 and not have executed else."
 
temp = failCount
failCount = failCount + 1
if 1 == 1:
 if 1 == 1:
  failCount = failCount - 1
if failCount != temp:
 print "Nested if statements didnt work."


############### testing for statements ################
for i in range(0):
 print "This for loop has a range of 0, so it should never execute its statements."
 failCount = failCount + 1

a = 0 
for i in range(3):
 a = a + 1
if a != 3:
 print "For loop on line 62 didnt execute properly"
 failCount = failCount + 1

a = 0
for i in range(1, 3):
 a = a + 1
if a != 2:
 print "For loop on line 69 didnt execute properly"
 failCount = failCount + 1

a = 0
for i in range(5, 25, 5):
 a = a + 1
if a != 4:
 print "For loop on line 76 didnt execute properly"
 failCount = failCount + 1

a = 0
for i in range(5):
    for j in range(3):
     a = a + 1
     
  #print "Illegal dedent. Should produce an error"
if a != 15:
 print "For loop on line 83 didnt execute properly"
 failCount = failCount + 1

a = 0
b = 2
for i in range(5):
    for j in range(3):
        if b > 0:
            a = a + 1
             #print "Unexpected indent. Should produce an error"
    b = b - 1
if a != 6:
 print "For loop on line 94 didnt execute properly. a should be 6, but it is,", a
 failCount = failCount + 1
 
a = 0
for i in range(100):
    for j in range(1):
        if a == 0:
            a = a + 1
if a != 1:
 print "For loop on line 105 didnt execute properly. a should be 1, but it is,", a
 failCount = failCount + 1

for i in range(1, 0):
 print "For loop on line 113 shouldnt have executed"
 failCount = failCount + 1

temp = failCount
failCount = failCount + 1
for i in range(1, 0, -1):
 failCount = failCount - 1
if temp != failCount:
 print "For loop on line 119 didnt execute properly"

############### testing subtraction ################
if 1-1 != 0:
 print "Subtraction between two integers produced the wrong answer: 1-1 =", 1-1, ", should be 0" 
 failCount = failCount + 1

if (0==0) - (0==0) != 0:
 print "Subtraction between two booleans produced the wrong answer: (0==0) - (0==0) =", (0==0) - (0==0), ", should be 0" 
 failCount = failCount + 1

if 1 - (0==0) != 0:
 print "Subtraction between an int and a bool produced the wrong answer: 1-(0==0) =", 1-(0==0), ", should be 0"
 failCount = failCount + 1


############### testing multiplication ################
if 1*1 != 1:
 print "Multiplication between two integers produced the wrong answer: 1*1 =", 1*1, ", should be 1" 
 failCount = failCount + 1

if (0==0) * (0==0) != 1:
 print "Multiplication between two booleans produced the wrong answer: (0==0) * (0==0) =", (0==0) * (0==0), ", should be 1" 
 failCount = failCount + 1

if 1 * (0==0) != 1:
 print "Multiplication between an int and a bool produced the wrong answer: 1*(0==0) =", 1*(0==0), ", should be 1"
 failCount = failCount + 1

 
############### testing division ################
#print 3 / 0 #division by 0 should cause an error. 
if 1/1 != 1:
 print "Division between two integers produced the wrong answer: 1/1 =", 1/1, ", should be 1" 
 failCount = failCount + 1

if (0==0) / (0==0) != 1:
 print "Division between two booleans produced the wrong answer: (0==0) / (0==0) =", (0==0) / (0==0), ", should be 1" 
 failCount = failCount + 1

if 1 / (0==0) != 1:
 print "Division between an int and a bool produced the wrong answer: 1/(0==0) =", 1/(0==0), ", should be 1"
 failCount = failCount + 1


############### testing integer division ################
#print 3 // 0 #division by 0 should cause an error. 
if not 1/2 == 0:
 print "Integer division between two integers produced the wrong answer: 1/2 =", 1/2, ", should be 0"
 failCount = failCount + 1

if (0==0) / (0==0) != 1:
 print "Integer division between two booleans produced the wrong answer: (0==0) / (0==0) =", (0==0) / (0==0), ", should be 1"
 failCount = failCount + 1

if 1 / (0==0) != 1:
 print "Integer division between an int and a bool produced the wrong answer: 1/(0==0) =", 1/(0==0), ", should be 1"
 failCount = failCount + 1

 
############### testing modulo ################
#print 1 % 0 #modulo by 0 should produce an error
if 1%1 != 0:
 print "Modulo between two integers produced the wrong answer: 1%1 =", 1%1, ", should be 0" 
 failCount = failCount + 1
if (0==0) % (0==0) != 0:
 print "Modulo between two booleans produced the wrong answer: (0==0) % (0==0) =", (0==0) % (0==0), ", should be 0" 
 failCount = failCount + 1
if 1 % (0==0) != 0:
 print "Modulo between an int and a bool produced the wrong answer: 1%(0==0) =", 1% (0==0), ", should be 0"
 failCount = failCount + 1

############### boolean expressions ################
temp = failCount
failCount = failCount + 1
if 1 and 2:
 failCount = failCount - 1
if failCount != temp:
 print "Boolean expression 1 and 2 evaluated to", 1 and 2, ", but should have evaluated to 1"

if not 1 and 2:
 print "Boolean expression not 1 and 2 evaluated to", not 1 and 2, ", but should have evaluated to 0"
 failCount = failCount + 1

if 1 > 0 and 5 > 5:
 print "Boolean expressions 1 > 0 and 5 > 5 evaluated to", 1 > 0 and 5 > 5, ", but should have evaluated to 0"
 failCount = failCount + 1

if not (1 > 0 or 2 >= 2) and (1 == 1 and (2 != 3 or 4 < 10)):
 print "Boolean expression on line 210 evaluated to", not (1 > 0 or 2 >= 2) and (1 == 1 and (2 != 3 or 4 < 10)), ", but should have evaluated to 0"
 failCount = failCount + 1
 
if not 1:
 print "not not not 1 evaluated to", not 1, ", but should have evaluated to 0"
############### extra edge cases ################
if 0 == 0 + 2:
 print "0 == 0 + 2 evaluated to", 0 == 0 + 2, ", but should have evaluated to 0"
 failCount = failCount + 1

if "a" == "b":
 print "Line 231 evaluated to", "a" == "b", ", but should have evaluated to 0"
 failCount = failCount + 1

if not "a" == "a":
 print "Line 235 evaluated to", not "a" == "a", ", but should have evaluated to 0"
 failCount = failCount + 1
 
if "ab" > "b":
 print "Line 238 evaluated to", "ab" > "b", ", but should have evaluated to 0"
 failCount = failCount + 1
 
if "ab" >= "ba":
 print "Line 241 evaluated to", "ab" >= "ba", ", but should have evaluated to 0"
 failCount = failCount + 1

if "ab" > "ba":
 print "Line 244 evaluated to", "ab" > "ba", ", but should have evaluated to 0"
 failCount = failCount + 1
 
if 1 < 1:
 print "1 <> 1 evaluated to,", 1>1, ", but should have evaluated to 0"
 failCount = failCount + 1
 
a = 1
c = a + -2
if a < 1 or c != -1:
 print "c = a + -2 did not evaluate correcty. a =", a, ", and c =", c, ". a should be 1, and c should be -1"
 failCount = failCount + 1

if -5 - -3 != -2:
 print "-5 - ---3 evaluated to", -5 - -3, ", but should have evaluated to -2. Yes this is valid in python"
 failCount = failCount + 1

a = 1
if -a != -1:
 print "-a evaluated to", -a, ", but should have evaluated to -1"
 failCount = failCount + 1
 
if -(5-2) != -3:
 print "-(5-2) evaluated to", -(5-2), ", but should have evaluted to -3"
 failCount = failCount + 1


if failCount == 0:
 print "All tests passed successfuly!"
else:
 print "Failed", failCount, "/ 46 tests."
